'use strict';

/**
 * @ngdoc function
 * @name swingerApp.controller:EntitiesCtrl
 * @description
 * # EntitiesCtrl
 * Controller of the swingerApp
 */
angular.module('swingerApp')

  .config(function($stateProvider) {
    $stateProvider.state('app.entities', {
      abstract: true,
      url: '/entities',
      templateUrl: 'views/entities/main.html',
      controller: 'EntitiesCtrl'
    })
    .state('app.entities.list', {
      url: '',
      templateUrl: 'views/entities/list.html',
      controller: 'EntitiesCtrl'
    })
    .state('app.entities.add', {
      url: '/add',
      templateUrl: 'views/entities/form.html',
      controller: 'EntitiesCtrl'
    })
    .state('app.entities.edit', {
      url: '/:id/edit',
      templateUrl: 'views/entities/form.html',
      controller: 'EntitiesCtrl'
    })
    .state('app.entities.view', {
      url: '/:id',
      templateUrl: 'views/entities/view.html',
      controller: 'EntitiesCtrl'
    });
  })

  .controller('EntitiesCtrl', function($scope, $state, $stateParams, toasty, Entity, Tag) {

  var id = $stateParams.id;

  if (id) {
    $scope.entity = Entity.findById({
      id: id
    }, function() {}, function(err) {
      console.log(err);
    });
  } else {
    $scope.entity = {};
  }

  function loadItems() {
    $scope.entities = Entity.find();
  }

  loadItems();

  $scope.delete = function(id) {
    // if (confirm('Are you sure?') === false) {
    //   return false;
    // }
    Entity.deleteById(id, function() {
      toasty.pop.success({title: 'Post deleted', msg: 'Your post is deleted!', sound: false});
      loadItems();
      $state.go('app.entities.list');
      console.log();
    }, function(err) {
      toasty.pop.error({title: 'Error deleting post', msg: 'Your post is not deleted: ' + err, sound: false});
    });

  };

  /**
   *
   * I would prefer these fields where generated by some kind of filter.
   *
   */
  $scope.formFields = [{
    key: 'title',
    type: 'text',
    label: 'Title',
    placeholder: 'Enter a title for your post',
    required: true
  }, {
    key: 'content',
    type: 'textarea',
    lines: 14,
    label: 'Content',
    placeholder: 'Write some content!',
    required: true
  }, {
    key: 'handle',
    type: 'text',
    label: 'Handle'
  }, {
    key: 'author',
    type: 'text',
    label: 'Author'
  }, {
    key: 'description',
    type: 'textarea',
    lines: 4,
    label: 'Description',
    required: true
  }, {
    key: 'tags',
    templateUrl: 'views/elements/tags.html',
    label: 'Tags'
  }, {
    key: 'image',
    type: 'text',
    label: 'image'
  }];

  $scope.formOptions = {
    uniqueFormId: true,
    hideSubmit: false,
    submitCopy: 'Save'
  };

  $scope.onSubmit = function() {

    // server should do creation and updated etc.
    $scope.post.contentType = 'text/x-markdown';
    Entity.upsert($scope.entity, function() {
      toasty.pop.success({title: 'Post saved', msg: 'Your post is safe with us!', sound: false});
      $state.go('^.list');
    }, function(err) {
      console.log(err);
    });
  };

  });
